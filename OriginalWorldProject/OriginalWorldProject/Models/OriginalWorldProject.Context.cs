//------------------------------------------------------------------------------
// <auto-generated>
//     這個程式碼是由範本產生。
//
//     對這個檔案進行手動變更可能導致您的應用程式產生未預期的行為。
//     如果重新產生程式碼，將會覆寫對這個檔案的手動變更。
// </auto-generated>
//------------------------------------------------------------------------------

namespace OriginalWorldProject.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OriginalWorldEntities : DbContext
    {
        public OriginalWorldEntities()
            : base("name=OriginalWorldEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Administrator> Administrator { get; set; }
        public virtual DbSet<Announcement> Announcement { get; set; }
        public virtual DbSet<Announcement_type> Announcement_type { get; set; }
        public virtual DbSet<Approval_status> Approval_status { get; set; }
        public virtual DbSet<M_moodsheet> M_moodsheet { get; set; }
        public virtual DbSet<Member> Member { get; set; }
        public virtual DbSet<Message> Message { get; set; }
        public virtual DbSet<Moodshee> Moodshee { get; set; }
        public virtual DbSet<Processing_method> Processing_method { get; set; }
        public virtual DbSet<Processing_status_table> Processing_status_table { get; set; }
        public virtual DbSet<Re_message> Re_message { get; set; }
        public virtual DbSet<Report_category> Report_category { get; set; }
        public virtual DbSet<Report_datail> Report_datail { get; set; }
        public virtual DbSet<Report_table> Report_table { get; set; }
        public virtual DbSet<Rta_message> Rta_message { get; set; }
        public virtual DbSet<Star> Star { get; set; }
        public virtual DbSet<Star_table> Star_table { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<Track_work> Track_work { get; set; }
        public virtual DbSet<Track_writer> Track_writer { get; set; }
        public virtual DbSet<Type_table> Type_table { get; set; }
        public virtual DbSet<Work_status> Work_status { get; set; }
        public virtual DbSet<Work_type> Work_type { get; set; }
        public virtual DbSet<Works> Works { get; set; }
        public virtual DbSet<Works_Content> Works_Content { get; set; }
        public virtual DbSet<Writer> Writer { get; set; }
        public virtual DbSet<Writer_application> Writer_application { get; set; }
        public virtual DbSet<Writer_home> Writer_home { get; set; }
    
        public virtual int updateAdm(string administrator_ID, string adm_name, string account, string password, Nullable<bool> authority, string confirm_pwd)
        {
            var administrator_IDParameter = administrator_ID != null ?
                new ObjectParameter("Administrator_ID", administrator_ID) :
                new ObjectParameter("Administrator_ID", typeof(string));
    
            var adm_nameParameter = adm_name != null ?
                new ObjectParameter("Adm_name", adm_name) :
                new ObjectParameter("Adm_name", typeof(string));
    
            var accountParameter = account != null ?
                new ObjectParameter("Account", account) :
                new ObjectParameter("Account", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var authorityParameter = authority.HasValue ?
                new ObjectParameter("Authority", authority) :
                new ObjectParameter("Authority", typeof(bool));
    
            var confirm_pwdParameter = confirm_pwd != null ?
                new ObjectParameter("Confirm_pwd", confirm_pwd) :
                new ObjectParameter("Confirm_pwd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateAdm", administrator_IDParameter, adm_nameParameter, accountParameter, passwordParameter, authorityParameter, confirm_pwdParameter);
        }
    
        public virtual int updateMem(string memberID, string nickname, string account, string m_Password, string phone, string email, Nullable<bool> gender, Nullable<System.DateTime> birthday, Nullable<bool> m_status, Nullable<bool> writter_qualifications, string confirm_pwd)
        {
            var memberIDParameter = memberID != null ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(string));
    
            var nicknameParameter = nickname != null ?
                new ObjectParameter("Nickname", nickname) :
                new ObjectParameter("Nickname", typeof(string));
    
            var accountParameter = account != null ?
                new ObjectParameter("Account", account) :
                new ObjectParameter("Account", typeof(string));
    
            var m_PasswordParameter = m_Password != null ?
                new ObjectParameter("M_Password", m_Password) :
                new ObjectParameter("M_Password", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(bool));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            var m_statusParameter = m_status.HasValue ?
                new ObjectParameter("M_status", m_status) :
                new ObjectParameter("M_status", typeof(bool));
    
            var writter_qualificationsParameter = writter_qualifications.HasValue ?
                new ObjectParameter("Writter_qualifications", writter_qualifications) :
                new ObjectParameter("Writter_qualifications", typeof(bool));
    
            var confirm_pwdParameter = confirm_pwd != null ?
                new ObjectParameter("Confirm_pwd", confirm_pwd) :
                new ObjectParameter("Confirm_pwd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateMem", memberIDParameter, nicknameParameter, accountParameter, m_PasswordParameter, phoneParameter, emailParameter, genderParameter, birthdayParameter, m_statusParameter, writter_qualificationsParameter, confirm_pwdParameter);
        }
    }
}
